initSidebarItems({"derive":[["Deserialize",""]],"enum":[["LevelFilter","An enum representing the available verbosity level filters of the logger."]],"fn":[["collect_java_policies","Collect the directories containing java policy files."],["find_java_home","Find the Java home directory"],["get_rust_toolchain",""],["main",""],["setup_logs",""]],"macro":[["env","Inspects an environment variable at compile time."],["error","Logs a message at the error level."],["info","Logs a message at the info level."],["warn","Logs a message at the warn level."]],"mod":[["cmd","Command execution and sandboxing."],["env","Inspection and manipulation of the process’s environment."],["fs","Filesystem manipulation operations."],["logging","rustwide’s logging system and related utilities."]],"struct":[["CargoPrusti",""],["Command","A process builder, providing fine-grained control over how a new process should be spawned."],["Crate","A Rust crate that can be used with rustwide."],["CrateRecord",""],["LogStorage","Store logs captured by `capture` and retrieve them later."],["Path","A slice of a path (akin to [`str`])."],["PathBuf","An owned, mutable path (akin to [`String`])."],["RustToolchain",""],["RustToolchainFile",""],["Toolchain","Representation of a Rust compiler toolchain."],["WorkspaceBuilder","Builder of a `Workspace`."]],"trait":[["Deserialize","A data structure that can be deserialized from any data format supported by Serde."],["Error","`Error` is a trait representing the basic expectations for error values, i.e., values of type `E` in [`Result<T, E>`]."]]});